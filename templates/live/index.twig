{% extends "_layout/_layout" %}

{% block css %}
	<link rel="stylesheet" href="https://unpkg.com/tailwindcss@2.2.19/dist/tailwind.min.css">
{% endblock %}

{% block content %}


	<div class="flex overflow-hidden w-full flex-no-wrap justify-center p-8 pb-4">
		<div class="flex-grow sm:w-full md:w-2/3" style="height:92%;">
			<div>
				<iframe src="https://player.restream.io?token=2123471e69ed8bf8cb11cd207c282b1" width="100%" height="315px" style="frameborder:0;border:0;" allow="fullscreen"></iframe>
			</div>
			<!-- Live countdown -->
			<div class="medium-8 columns no-padding-right">
				<div data-behavior="reminder_header" class="co-reminder-header">
					<div id="countdown-header">
						<span class="co-reminder-header-title">Next event</span>
						<div data-behavior="header-countdown-clock" class="co-header-countdown-time">
							<span id="countdown"></span>
						</div>

						<button><i class="fa fa-time"></i>Remind me</button>
						 <a href="javascript:void();" class="co-header-countdown-close">
						  <i class="co-icon-times-large"></i>
						 </a>
					</div>
				</div>
			</div>
			<!-- end live countdown -->
		</div>
		<div class="flex-grow sm:w-full md:w-1/3">
			<div style="height:100%">
				<div class="tab-content" style="height:92%;">
					<div id="chat" class="tab-pane fade in active">
						{% if craft.youtubelive.isLive() %}
						{% include "_includes/chat" %}
						{% else %}
							<h1 class="text-center">Chat unavailable</h1>
						{% endif %}
					</div>
					<div id="notes" class="tab-pane fade">
						<span name="editor1" id="editor1" height="100%">
							{{ entry.notes }}
						</span>
					</div>
					<div id="schedule" class="tab-pane fade">
						{% include "_includes/schedule" %}
					</div>
					<div id="bible" class="tab-pane fade">
						<iframe frameborder="no" framespacing="0" height="400" src="https://www.bible.com/bible" width="100%"></iframe>
					</div>
				</div>
				<ul class="nav nav-tabs nav-justified">
					<li class="active bg-dark"><a data-toggle="tab" href="#chat">Chat</a></li>
					<li><a data-toggle="tab" href="#notes">Notes</a></li>
					<li><a data-toggle="tab" href="#schedule">Schedule</a></li>
					<li><a data-toggle="tab" href="#bible">Bible</a></li>
				</ul>
			</div>
		</div>
	</div>

<script src="https://cdn.ckeditor.com/ckeditor5/32.0.0/classic/ckeditor.js"></script>
<script>
        ClassicEditor
                                .create( document.querySelector( '#editor1' ) )
                                .then( editor => {
                                        console.log( editor );
                                } )
                                .catch( error => {
                                        console.error( error );
                                } );
</script>
							<script>

								const CURRENT_SERVICE_QUERY = `
query CurrentService {
  currentService(onEmpty: LOAD_NEXT) {
    id
    startTime
    endTime
    content {
      title
    }
  }
}
`;

async function startCountdown() { // Fetch the current or next service data
const service = await fetch("https://dcogb.online.church/graphql", {
method: "POST",
headers: {
"Content-Type": "application/json",
Accept: "application/json"
},
body: JSON.stringify(
{query: CURRENT_SERVICE_QUERY, operationName: "CurrentService"}
)
}).then((response) => response.json()).catch((error) => console.error(error));

// If no service was returned from the API, don't display the countdown
if (! service.data.currentService || ! service.data.currentService.id) {
return;
}

// Set the service title
document.getElementById("serviceTitle").innerText = service.data.currentService.content.title;

// Set the date we're counting down to
const startTime = new Date(service.data.currentService.startTime).getTime();
const endTime = new Date(service.data.currentService.endTime).getTime();

// Create a one second interval to tick down to the startTime
const intervalId = setInterval(function () {
const now = new Date().getTime();

// If we are between the start and end time, the service is live
if (now >= startTime && now <= endTime) {
clearInterval(intervalId);
document.getElementById("countdown").innerHTML = "";
return;
}

// Find the difference between now and the start time
const difference = startTime - now;

// Time calculations for days, hours, minutes and seconds
const days = Math.floor(difference / (1000 * 60 * 60 * 24));
const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
const seconds = Math.floor((difference % (1000 * 60)) / 1000);

// Display the results in the element with id="countdown"
document.getElementById("countdown").innerHTML = "<div class='co-countdown-unit'><span class='co-countdown-digit co-countdown-days'>" + days + "</span><span class='co-countdown-digit-label'>days</span></div><div class='co-countdown-unit'><span class='co-countdown-digit co-countdown-hours'>" + hours + "</span><span class='co-countdown-digit-label'>hours</span></div><div class='co-countdown-unit'><span class='co-countdown-digit co-countdown-mins'>" + minutes + "</span><span class='co-countdown-digit-label'>mins</span></div><div class='co-countdown-unit'><span class='co-countdown-digit co-countdown-secs'>" + seconds + "</span><span class='co-countdown-digit-label'>secs</span></div>";

// If we are past the end time, clear the countdown
if (difference < 0) {
clearInterval(intervalId);
document.getElementById("countdown").innerHTML = "";
return;
}
}, 1000);
}

startCountdown();
							</script>
{% endblock %}
